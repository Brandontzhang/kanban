{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Brandon\\\\Desktop\\\\AngularProjects\\\\p4-kanban-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SectionsService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'localhost:8080/kanban';\n    this.sections = [{\n      title: 'section1',\n      cards: [{\n        title: 'card1',\n        description: 'card1 description',\n        tasks: [{\n          desc: 'section1 card1 task1',\n          completed: false\n        }, {\n          desc: 'section1 card1 task2',\n          completed: false\n        }, {\n          desc: 'section1 card1 task3',\n          completed: false\n        }, {\n          desc: 'section1 card1 task4',\n          completed: false\n        }]\n      }, {\n        title: 'card2',\n        description: 'card2 description',\n        tasks: [{\n          desc: 'section1 card2 task1',\n          completed: false\n        }, {\n          desc: 'section1 card2 task2',\n          completed: false\n        }, {\n          desc: 'section1 card2 task3',\n          completed: false\n        }, {\n          desc: 'section1 card2 task4',\n          completed: false\n        }]\n      }]\n    }, {\n      title: 'section2',\n      cards: [{\n        title: 'card1',\n        description: 'card1 description',\n        tasks: [{\n          desc: 'section2 card1 task1',\n          completed: false\n        }, {\n          desc: 'section2 card1 task2',\n          completed: false\n        }, {\n          desc: 'section2 card1 task3',\n          completed: false\n        }, {\n          desc: 'section2 card1 task4',\n          completed: false\n        }, {\n          desc: 'section2 card1 task5',\n          completed: false\n        }, {\n          desc: 'section2 card1 task6',\n          completed: false\n        }]\n      }, {\n        title: 'card2',\n        description: 'card2 description',\n        tasks: [{\n          desc: 'section2 card2 task1 yar asd as dasd asd asd ao',\n          completed: false\n        }, {\n          desc: 'section2 card2 task2',\n          completed: false\n        }, {\n          desc: 'section2 card2 task3',\n          completed: false\n        }, {\n          desc: 'section2 card2 task4',\n          completed: false\n        }]\n      }]\n    }];\n  }\n\n  getSections() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let resp = yield _this.http.get('/all');\n      console.log(resp);\n      return _this.sections;\n    })();\n  }\n\n  addSection() {\n    this.http.post(this.baseUrl + '/add', 'New Section');\n  }\n\n  addSubTask(subTask, cardTitle) {\n    this.sections.forEach(section => {\n      section.cards.forEach(card => {\n        if (card.title == cardTitle) {\n          card.tasks.push({\n            desc: subTask,\n            completed: false\n          });\n        }\n      });\n    });\n  } // create a card under the name of the given section\n\n\n  createCard(sectionTitle) {\n    this.sections.forEach(section => {\n      if (section.title == sectionTitle) {\n        section.cards.push({\n          title: 'New Card',\n          description: 'Card description',\n          tasks: []\n        });\n      }\n    });\n  }\n\n  setCardDescription(newDesc, cardTitle) {\n    this.sections.forEach(section => {\n      section.cards.forEach(card => {\n        if (card.title == cardTitle) {\n          card.description = newDesc;\n        }\n      });\n    });\n  }\n\n}\n\nSectionsService.ɵfac = function SectionsService_Factory(t) {\n  return new (t || SectionsService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nSectionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SectionsService,\n  factory: SectionsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/Brandon/Desktop/AngularProjects/p4-kanban-frontend/src/app/service/sections.service.ts"],"names":["i0","i1","SectionsService","constructor","http","baseUrl","sections","title","cards","description","tasks","desc","completed","getSections","resp","get","console","log","addSection","post","addSubTask","subTask","cardTitle","forEach","section","card","push","createCard","sectionTitle","setCardDescription","newDesc","ɵfac","SectionsService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class SectionsService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.baseUrl = 'localhost:8080/kanban';\r\n        this.sections = [\r\n            { title: 'section1', cards: [\r\n                    { title: 'card1', description: 'card1 description', tasks: [\r\n                            { desc: 'section1 card1 task1', completed: false },\r\n                            { desc: 'section1 card1 task2', completed: false },\r\n                            { desc: 'section1 card1 task3', completed: false },\r\n                            { desc: 'section1 card1 task4', completed: false },\r\n                        ] },\r\n                    { title: 'card2', description: 'card2 description', tasks: [\r\n                            { desc: 'section1 card2 task1', completed: false },\r\n                            { desc: 'section1 card2 task2', completed: false },\r\n                            { desc: 'section1 card2 task3', completed: false },\r\n                            { desc: 'section1 card2 task4', completed: false },\r\n                        ] }\r\n                ]\r\n            },\r\n            { title: 'section2', cards: [\r\n                    { title: 'card1', description: 'card1 description', tasks: [\r\n                            { desc: 'section2 card1 task1', completed: false },\r\n                            { desc: 'section2 card1 task2', completed: false },\r\n                            { desc: 'section2 card1 task3', completed: false },\r\n                            { desc: 'section2 card1 task4', completed: false },\r\n                            { desc: 'section2 card1 task5', completed: false },\r\n                            { desc: 'section2 card1 task6', completed: false },\r\n                        ] },\r\n                    { title: 'card2', description: 'card2 description', tasks: [\r\n                            { desc: 'section2 card2 task1 yar asd as dasd asd asd ao', completed: false },\r\n                            { desc: 'section2 card2 task2', completed: false },\r\n                            { desc: 'section2 card2 task3', completed: false },\r\n                            { desc: 'section2 card2 task4', completed: false },\r\n                        ] }\r\n                ]\r\n            }\r\n        ];\r\n    }\r\n    async getSections() {\r\n        let resp = await this.http.get('/all');\r\n        console.log(resp);\r\n        return this.sections;\r\n    }\r\n    addSection() {\r\n        this.http.post(this.baseUrl + '/add', 'New Section');\r\n    }\r\n    addSubTask(subTask, cardTitle) {\r\n        this.sections.forEach(section => {\r\n            section.cards.forEach(card => {\r\n                if (card.title == cardTitle) {\r\n                    card.tasks.push({\r\n                        desc: subTask,\r\n                        completed: false,\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    // create a card under the name of the given section\r\n    createCard(sectionTitle) {\r\n        this.sections.forEach(section => {\r\n            if (section.title == sectionTitle) {\r\n                section.cards.push({\r\n                    title: 'New Card',\r\n                    description: 'Card description',\r\n                    tasks: []\r\n                });\r\n            }\r\n        });\r\n    }\r\n    setCardDescription(newDesc, cardTitle) {\r\n        this.sections.forEach(section => {\r\n            section.cards.forEach(card => {\r\n                if (card.title == cardTitle) {\r\n                    card.description = newDesc;\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\nSectionsService.ɵfac = function SectionsService_Factory(t) { return new (t || SectionsService)(i0.ɵɵinject(i1.HttpClient)); };\r\nSectionsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SectionsService, factory: SectionsService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}